# Fastlane Documentation:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
#
# Fastlane actions: 
# https://docs.fastlane.tools/actions/
#
# Bitrise with fastlane example:
# https://github.com/bitrise-samples/fastlane/blob/master/BitriseFastlaneSample/fastlane/Fastfile

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

#
# This file was created by the help of https://gist.github.com/ulhas/e8e529d08849b8cda947
#

# NOTE: To use faslane install:
#           gem install bundler
#           brew install apledoc
#
#   and then run:
#           bundle exec fastlane release product_name:SHSearchBar version:"<YOUR_VERSION_HERE>" github_account:"blackjacx"





# TODO: Deploy app to Apple TestFlight





# This is the minimum version number required. 
# Update this, if you use features of a newer version.
fastlane_version "2.45.0"

default_platform :ios



before_all do
  cocoapods
end


after_all do |lane|
  # This block is called, only if the executed lane was successful
  ship_it
  notification(
  	subtitle: "Success", 
  	message: "Lane #{lane} completed successfully"
  )
end


error do |lane, exception|
  # This block is called, only if the executed lane failed
  clean_build_artifacts
  notification(
  	subtitle: "Failure",
  	message: "Lane #{lane} failed with error #{exception}"
  )
end

###############################################################################
#                          PUBLIC SECTION
###############################################################################

desc "Releases a new product version"
lane :release do |options|

  if !options[:product_name] || !options[:version] || !options[:github_account]
    raise "No product_name, version specified, or github_account specified!".red
  end

  product_name = options[:product_name]
  version = options[:version]
  github_account = options[:github_account]
 
  ensure_git_status_clean(show_uncommitted_changes: true)
  ensure_git_branch(branch: "develop")
  git_pull

  test(product_name: product_name, run_danger: true)
  
  # START: changes that must be comitted

  increment_bundle_versions(product_name: product_name, version: version)

  # using changelog fastlane plugin
  changelog = read_changelog

  # using changelog fastlane plugin
  # stamp Unreleased section with newly released build number
  stamp_changelog(section_identifier: version)

  # END: changes that must be comitted

  sh "git commit -am 'Fastlane: Release on Production #{version}'"

  # merge changes into master
  sh "git checkout master"
  sh "git merge develop"

  add_git_tag(tag: version)

  # backmerge into develop
  sh "git checkout develop"
  sh "git merge master"

  # push all changes on all branches and all tags
  push_to_git_remote(
    local_branch: "master",
    remote_branch: "master",
    force: true,
    tags: true
  )

  push_to_git_remote(
    local_branch: "develop",
    remote_branch: "develop",
    force: true,
    tags: true
  )

  push_github_release(
  	product_name: product_name, 
  	version: version, 
  	github_account: github_account, 
  	changelog: changelog
  ) 

  # deploy to TestFlight, Crashlytics, Hockey or whatever
end




desc "Runs tests optionally with danger"
lane :test do |options|

  if !options[:product_name]
    raise "No product_name or use_ci specified".red
  end

  product_name = options[:product_name]
  run_danger = options[:run_danger]

  # Easily run tests of your iOS app using scan
  scan(
    workspace: "#{product_name}.xcworkspace",
    scheme: product_name,
    clean: true,
    devices: ["iPhone 7"],
    skip_build: true,
    thread_sanitizer: true,
    output_types: "html"
  )

  # Runs danger for the project
  if run_danger

    danger(
      use_bundle_exec: true,
      github_api_token: ENV["GITHUB_TOKEN"],
      verbose: true
    )
  end

end




###############################################################################
#                          PRIVATE SECTION
###############################################################################

desc "Increments CFBundleVersion by one and sets CFBundleShortVersionString"
private_lane :increment_bundle_versions do |options|

  if !options[:product_name] || !options[:version]
    raise "No product_name or no version specified".red
  end

  product_name = options[:product_name]
  version = options[:version]
  project = "#{product_name}.xcodeproj"

  increment_version_number(xcodeproj: project, version_number: version)
  increment_build_number(xcodeproj: project)
end




desc "Creates a github release with a git commit changelog"
private_lane :push_github_release do |options|

  if !options[:product_name] || !options[:version] || !options[:github_account] || !options[:changelog]
    raise "No product_name, version specified, github_account or changelog specified!".red
  end

  product_name = options[:product_name]
  version = options[:version]
  github_account = options[:github_account]
  changelog = options[:changelog]

  github_release = set_github_release(
    repository_name: "#{github_account}/#{product_name}",
    api_token: ENV["GITHUB_TOKEN"],
    name: version,
    tag_name: version,
    description: ("#{changelog}" rescue "No changelog provided"),
    commitish: "master"
  )
end

#
# Helper Functions
#

def ship_it
  rand = Random.rand(0..1)
  if rand == 0
    squirrel
  elsif rand == 1
    boat
  end
end

def squirrel
  puts "
    !!!!
  !!!!!!!!
!!!!!!!!!!!   O_O
!!!  !!!!!!! /@ @\\
      !!!!!! \\ x /
      !!!!!!/ m  !m
       !!!!/ __  |
       !!!!|/  \\__
        !!!\\______\\
  "
end

def boat
  puts "
     .  o ..
     o . o o.o
          ...oo
            __[]__
         __|_o_o_o\__
         \\\"\"\"\"\"\"\"\"\"\"/
          \\. ..  . /
     ^^^^^^^^^^^^^^^^^^^^
  "
end
